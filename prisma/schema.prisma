generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id             String     @id
  phone          String     @unique
  phoneVerified  DateTime?
  name           String?
  image          String?
  role           PersonRole @default(CONTACT)
  createdAt      DateTime?  @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime?  @updatedAt
  reportedIssues Issue[]    @relation("report")
  user           User?
  userId         String
}

enum PersonRole {
  CONTACT
  USER
}

model User {
  person               Person         @relation(fields: [id], references: [id])
  id                   String         @id
  membership           Member[]       @relation("membership")
  invitedMembers       Member[]       @relation("inviter")
  issues               Issue[]        @relation("assignment")
  createdOrganizations Organization[]
}

model Organization {
  id         String    @id
  domain     String    @unique
  inviteCode String    @unique
  creatorId  String
  name       String?
  createdAt  DateTime? @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime? @updatedAt

  creator User     @relation(fields: [creatorId], references: [id])
  members Member[]
  flows   Flow[]
  issues  Issue[]
  @@unique([domain, inviteCode])
}

model Member {
  id             String       @unique
  alias          String       @unique
  UserId         String
  OrganizationId String
  member         User         @relation(fields: [UserId], references: [id], name: "membership")
  organization   Organization @relation(fields: [OrganizationId], references: [id])

  inviter   String
  invitedAt DateTime?        @default(now())
  joinedAt  DateTime?
  deletedAt DateTime?
  updatedAt DateTime?        @updatedAt
  status    InvitationStatus @default(PENDING)
  teamRole  TeamRole         @default(MEMBER)
  invitedBy User?            @relation(fields: [inviter], references: [id], name: "inviter")
  flows     MembersOnFlows[]
  @@id([OrganizationId, UserId])
}

enum InvitationStatus {
  ACCEPTED
  PENDING
  DECLINED
}

enum TeamRole {
  MEMBER
  OWNER
}

model Issue {
  id             String       @unique
  assigneeId     String
  assignee       User?        @relation("assignment", fields: [assigneeId], references: [id])
  reporterId     String
  reporter       Person       @relation("report", fields: [reporterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  currentState   State        @relation(fields: [currentStateId], references: [id])
  currentStateId String

  @@id([organizationId, id])
}

model Flow {
  id             String           @unique
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  members        MembersOnFlows[]
  states         State[]

  @@id([organizationId, id])
}

model MembersOnFlows {
  flow       Flow     @relation(fields: [flowId], references: [id])
  flowId     String
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([flowId, memberId])
}

model State {
  id     String  @unique
  name   String
  flowId String
  flow   Flow    @relation(fields: [flowId], references: [id])
  issues Issue[]

  @@id([flowId, id])
}

// model Person {
// -->  client        Client?
// }

// model Client {
//   person Person @relation(fields: [id], references: [id])
//   id     String @id
//   /// pattern: ^[0-9]{11}$
//   cpf    String @unique
// }

// enum PersonRole {
//   CONTACT
//   CLIENT
//   PATIENT
//   DOCTOR
//   MEMBER
//   USER
// }
